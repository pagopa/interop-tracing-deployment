name: TF Apply

on: 
  workflow_call:
    inputs:
      environment:
        description: 'Environment to run apply against'
        required: true
        type: string
      timeout_seconds:
        description: 'Terraform apply wait timeout in seconds'
        required: true
        type: number
    secrets:
      AWS_REGION:
        required: true
      TERRAFORM_IAM_ROLE_ARN:
        required: true

defaults:
  run:
    shell: bash

jobs:  
  workflow_setup:
    name: Setup steps
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    env:
      TARGET_ENVIRONMENT: ${{ inputs.environment }}
    outputs:
      microservices: ${{ steps.set-outputs.outputs.microservices }}
      cronjobs: ${{ steps.set-outputs.outputs.cronjobs }}
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29
      - id: set-outputs
        run: |
          echo "microservices=$(find microservices -type f -path "*/$TARGET_ENVIRONMENT/values.yaml" -exec dirname {} \; | awk -F'/' '{print $2}' | jq -R -s -c 'split("\n")[:-1]')" >> "$GITHUB_OUTPUT"
          echo "cronjobs=$(find jobs -type f -path "*/$TARGET_ENVIRONMENT/values.yaml" -exec dirname {} \; | awk -F'/' '{print $2}' | jq -R -s -c 'split("\n")[:-1]')" >> "$GITHUB_OUTPUT"

  terraform_apply_monitoring_microservices:
    name: Terraform Apply Monitoring Microservices
    needs: workflow_setup 
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:    
      - name: Create microservices JSON
        run: |
          echo '${{ needs.workflow_setup.outputs.microservices }}' | jq -c 'sort' > terraform/k8s-monitoring/assets/microservices-list.json  

      - name: Checkout
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@67fbcbb121271f7775d2e7715933280b06314838
        with:
          role-to-assume: ${{ secrets.TERRAFORM_IAM_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Read Terraform version
        id: read-version
        working-directory: terraform/
        run: |
          echo "TERRAFORM_VERSION=$(cat ./.terraform-version)" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@633666f66e0061ca3b725c73b2ec20cd13a8fdd1
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Normalize environment
        id: norm_env
        run: |
          GH_ENV="${{ inputs.environment }}"
          NORM_ENV="$(echo "$GH_ENV" | sed -e 's/_ro//')"
          echo "NORM_ENV=$NORM_ENV" >> $GITHUB_ENV

      - name: Terraform Init
        id: terraform_init
        working-directory: terraform/k8s-monitoring
        run: |
          ./terraform.sh init "$NORM_ENV"

      - name: Terraform Apply Monitoring Microservices
        id: terraform_apply_monitoring_microservice
        working-directory: terraform/k8s-monitoring
        run: |
          terraform apply -var-file="./env/dev/terraform.tfvars" -auto-approve -lock-timeout=120s
